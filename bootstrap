#!/bin/bash
# Forked from https://github.com/mdaffin/salt-arch
set -Eeuxo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

fail() {
  echo >&2 "$@"
  exit 1
}

if grep -qs /mnt /proc/mounts; then
    fail "/mnt is already mounted. Unmount it first, or edit this script."
fi

if [ ! -f laptop-pillar-secrets.gpg ]; then
    fail "Missing laptop-pillar-secrets.gpg. Copy into current dir and try again"
fi

gpgKeyUrl=https://keybase.io/atmoz/pgp_keys.asc
saltStateRepo=https://github.com/atmoz/salt-laptop.git

#####################################################################
## Select disk
#####################################################################

devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --menu "Select installtion disk" 0 0 0 ${devicelist}) || exit 1
clear

#####################################################################
## Setup the disk and partitions
#####################################################################

parted --script "${device}" -- mktable gpt \
    mkpart primary ext2 1Mib 2MiB \
    set 1 bios_grub on \
    mkpart primary ext4 2MiB 10GiB \
    mkpart primary ext4 10GiB 100%

# Simple globbing was not enough as on one device I needed to match /dev/mmcblk0p1
# but not /dev/mmcblk0boot1 while being able to match /dev/sda1 on other devices.
part_root="$(ls ${device}* | grep -E "^${device}p?2$")"
part_home="$(ls ${device}* | grep -E "^${device}p?3$")"

#####################################################################
## Format partitions
#####################################################################

mkfs.ext4 "${part_root}"
mount "${part_root}" /mnt

mkfs.ext4 "${part_home}"
mkdir /mnt/home
mount "${part_home}" /mnt/home

#####################################################################
## Install Arch Linux
#####################################################################

pacstrap /mnt base grub intel-ucode salt git gnupg
genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt sh -c "grub-install --target=i386-pc $device \
    && grub-mkconfig -o /boot/grub/grub.cfg"

#####################################################################
## Prepare and verify salt states
#####################################################################

arch-chroot /mnt sh -c "curl $gpgKeyUrl | gpg --import"
arch-chroot /mnt sh -c "git clone $saltStateRepo /srv/salt"

if ! arch-chroot /mnt sh -c "cd /srv/salt && git verify-commit HEAD"; then
    fail "GPG signature check failed!"
fi

cat >/mnt/etc/salt/minion <<EOF
file_client: local
file_roots:
  base:
    - /srv/salt/states
pillar_roots:
  base:
    - /srv/salt/pillar
EOF

#####################################################################
## Decrypt secret pillar data
#####################################################################

rm /usr/bin/pinentry # Default symlink to pinentry-gtk-2
ln -s /usr/bin/pinentry-tty /usr/bin/pinentry

curl $gpgKeyUrl | gpg --import
while ! gpg --card-status; do
    read -p "Insert yubikey and hit ENTER to continue ..."
done

secrets=/mnt/srv/salt/pillar/secrets.sls
( umask 077 && gpg -d laptop-pillar-secrets.gpg > $secrets )

#####################################################################
## Apply salt states
#####################################################################

arch-chroot /mnt sh -c "salt-call state.apply pillar='{\"bootstrap\": True}'"
rm $secrets
