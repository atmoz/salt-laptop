#!/bin/bash
# Forked from https://github.com/mdaffin/salt-arch
set -Eeuxo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

fail() {
  echo >&2 "$@"
  exit 1
}

publicKeyFingerprint=838460D0CBD26750AB26DF8FB9FB68F98F88BA47
saltStateRepo=https://github.com/atmoz/salt-laptop.git

#####################################################################
## Conditions
#####################################################################

if grep -qs /mnt /proc/mounts; then
    fail "/mnt is already mounted. Unmount it first, or edit this script."
fi

if [ ! -f laptop-pillar-secrets.gpg ]; then
    fail "Missing laptop-pillar-secrets.gpg. Copy into current dir and try again"
fi

if ! gpg --check-sigs $publicKeyFingerprint; then
    fail "Missing public key with fingerprint: $publicKeyFingerprint"
fi

#####################################################################
## Select disk
#####################################################################

devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --menu "Select disk to format" 0 0 0 $devicelist) || exit 1
clear

#####################################################################
## Setup the disk and partitions
#####################################################################

parted --script $device -- mktable gpt \
    mkpart primary ext2 1Mib 2MiB \
    set 1 bios_grub on \
    mkpart primary ext4 2MiB 100%

partition="${device}2"
mkfs.ext4 $partition
mount $partition /mnt

#####################################################################
## Install Arch Linux
#####################################################################

pacstrap /mnt base grub intel-ucode salt git gnupg
genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt sh -c "grub-install --target=i386-pc $device \
    && grub-mkconfig -o /boot/grub/grub.cfg"

#####################################################################
## Prepare and verify salt states
#####################################################################

gpg --export -a $publicKeyFingerprint | arch-chroot /mnt sh -c "gpg --import"

arch-chroot /mnt sh -c "git clone $saltStateRepo /srv/salt"
arch-chroot /mnt sh -c "cp /srv/salt/pre-commit /srv/salt/.git/hooks"

if ! arch-chroot /mnt sh -c "cd /srv/salt && git verify-commit HEAD"; then
    fail "GPG signature check failed!"
fi

cat >/mnt/etc/salt/minion <<EOF
state_verbose: False
file_client: local
file_roots:
  base:
    - /srv/salt/states
pillar_roots:
  base:
    - /srv/salt/pillar
EOF

#####################################################################
## Decrypt secret pillar data
#####################################################################

rm /usr/bin/pinentry # Default symlink to pinentry-gtk-2
ln -s /usr/bin/pinentry-tty /usr/bin/pinentry

while ! gpg --card-status; do
    read -p "Insert yubikey and hit ENTER to continue ..."
done

( umask 077 && gpg -d laptop-pillar-secrets.gpg > /mnt/srv/salt/pillar/secrets.sls )

#####################################################################
## Apply core state
#####################################################################

arch-chroot /mnt sh -c "salt-call state.apply core"

cat >/mnt/etc/motd <<EOF
#####################################################################
## Welcome to a fresh install :-)
#####################################################################

To complete the installation:
* Setup a network connection
* Run 'sudo salt-call state.apply'

EOF

umount -R /mnt
clear

echo -e "\nBootstrap complete! \n\nReboot when ready to continue installation."

